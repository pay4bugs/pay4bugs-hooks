Pay4Bugs Hooks
===============

How the services work
---------------------

1. A  background job is submitted when a bug is submitted or approved on Pay4Bugs
2. If the project the bug is submitted to has any "Service Hooks" set up, the
   job makes a request to `http://hooks-server/service_name/bug` with the
   following data:
    - `params[:payload]` containing all of the commit data (the same data you get using the API)
    - `params[:data]` containing the service data (username, password, room, etc)
3. Sinatra (pay4bugs-hooks-server.rb) processes the request (tweets your data, says
   something in hipchat, posts it to lighthouse, etc)
4. Rinse and repeat

Steps to contributing
---------------------

Start by reading the [Contributing Guidelines](https://github.com/pay4bugs/pay4bugs-hooks/blob/master/CONTRIBUTING.md).

1. Fork the project
2. Create a new file in /hooks/ called `service_name.rb`, using the [following
   template](https://github.com/pay4bugs/pay4bugs-hooks/tree/master/lib/services#readme):

    ```ruby
    class Hook::ServiceName < Hook
      string :auth_token, :room
      def receive_event
      end
    end
    ```

3. Vendor any external gems your code relies on, and make sure it is
   specified in the Gemfile.
4. Add documentation to `docs/service_name` (refer to the others for guidance)
5. Send a pull request from your fork to [pay4bugs/pay4bugs-hooks](https://github.com/pay4bugs/pay4bugs-hooks)
6. Any new necessary data fields in the Pay4Bugs
   front-end so people can start using your service hook will be generated from the schema values you provide in the hook file. No validation will be done on user input.

*Patches including tests are required*

A huge thanks goes out to [our many contributors](https://github.com/github/github-services/contributors)!

Running the server locally
--------------------------

1. [sudo] gem install hpricot
2. git clone git://github.com/pay4bugs/pay4bugs-hooks.git
3. cd pay4bugs-hooks
4. ruby pay4bugs-hooks-server.rb

* Bugs in the code should be filed under the Issues tab
* Problems with the service hooks can be filed
  [here](https://www.pay4bugs.com/contact)

How to test your service
------------------------

You can test your service in a ruby irb console:

0. Cache gems and install them to `vendor/gems` by doing:
   `script/bootstrap`
1. Start irb: `bundle exec irb -r config/load.rb -r lib/hooks/myservice.rb`
2. Instantiate your Service Hook:

    ```ruby
    hook = Hook::MyService.new(:bug,
      # Hash of configuration information.
      {'token' => 'abc'},
      # Hash of payload.
      {'blah' => 'payload!'})

    hook.receive_event
    ```

3. The third argument is optional if you just want to use the sample
   payload.

    ```ruby
    hook = Hook::MyService.new(:push,
      # Hash of configuration information.
      {'token' => 'abc'})

    hook.receive_event
    ```

You can also use this one-liner in the shell instead:

  ```bash
  bundle exec ruby -r config/load.rb -r lib/hooks/myservice.rb -e \
    "Hook::MyService.new(:bug, {'foo' => 'bar'}).receive_event"
  ```
